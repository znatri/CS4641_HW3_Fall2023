import numpy as np

class Regression_Test():
	def __init__(self):

		# Sample data
		self.x_all = np.array([[-5.  , -3.  ],
						       [-3.75, -2.25],
						       [-2.5 , -1.5 ],
						       [-1.25, -0.75],
						       [ 0.  ,  0.  ],
						       [ 1.25,  0.75],
						       [ 2.5 ,  1.5 ],
						       [ 3.75,  2.25],
						       [ 5.  ,  3.  ]])
		self.y_all = np.array([[ 2.93151   ],
						       [-0.16618882],
						       [-0.41168219],
						       [-1.27454902],
						       [-1.55952313],
						       [-1.39394503],
						       [ 0.08333787],
						       [ 2.24819231],
						       [ 2.00011928]])

		self.true_weight = np.array([[0.77132064],
							       [0.02075195],
							       [0.63364823],
							       [0.74880388],
							       [0.49850701],
							       [0.22479665]])

		self.x_all_feat = np. array([[-0.41976616, -1.39997687, -1.07323997,  1.86739216,  3.50107668,
							         0.88718145],
							       [-0.41976616, -1.1957663 , -0.95071363,  0.7952867 ,  1.71423424,
							         0.24391817],
							       [-0.41976616, -0.99155574, -0.82818729,  0.02949708,  0.43791821,
							        -0.2155556 ],
							       [-0.41976616, -0.78734518, -0.70566095, -0.42997669, -0.32787141,
							        -0.49123986],
							       [-0.41976616, -0.58313461, -0.58313461, -0.58313461, -0.58313461,
							        -0.58313461],
							       [-0.41976616, -0.37892405, -0.46060827, -0.42997669, -0.32787141,
							        -0.49123986],
							       [-0.41976616, -0.17471348, -0.33808193,  0.02949708,  0.43791821,
							        -0.2155556 ],
							       [-0.41976616,  0.02949708, -0.2155556 ,  0.7952867 ,  1.71423424,
							         0.24391817],
							       [-0.41976616,  0.23370765, -0.09302926,  1.86739216,  3.50107668,
							         0.88718145]])

		# Sample outputs:
		self.rmse = 0.6310068492392105
		self.predict = np.array([[ 2.31017402],
						       [ 0.55389674],
						       [-0.67719378],
						       [-1.38309755],
						       [-1.56381456],
						       [-1.21934482],
						       [-0.34968832],
						       [ 1.04515494],
						       [ 2.96518495]])

		self.construct_poly = np.array([[[ 1.    ,  1.    ],
								        [-5.    , -3.    ],
								        [25.    ,  9.    ]],

								       [[ 1.    ,  1.    ],
								        [-3.75  , -2.25  ],
								        [14.0625,  5.0625]],

								       [[ 1.    ,  1.    ],
								        [-2.5   , -1.5   ],
								        [ 6.25  ,  2.25  ]],

								       [[ 1.    ,  1.    ],
								        [-1.25  , -0.75  ],
								        [ 1.5625,  0.5625]],

								       [[ 1.    ,  1.    ],
								        [ 0.    ,  0.    ],
								        [ 0.    ,  0.    ]],

								       [[ 1.    ,  1.    ],
								        [ 1.25  ,  0.75  ],
								        [ 1.5625,  0.5625]],

								       [[ 1.    ,  1.    ],
								        [ 2.5   ,  1.5   ],
								        [ 6.25  ,  2.25  ]],

								       [[ 1.    ,  1.    ],
								        [ 3.75  ,  2.25  ],
								        [14.0625,  5.0625]],

								       [[ 1.    ,  1.    ],
								        [ 5.    ,  3.    ],
								        [25.    ,  9.    ]]])
		# self.linear_closed = np.array([[0.46697579],
		# 						       [0.14886262],
		# 						       [0.34880466],
		# 						       [0.53249642],
		# 						       [0.45501556],
		# 						       [0.57898494]])

		self.linear_closed = np.array([[ 3.11428866e+06],
								       [-7.09956538e+07],
								       [ 1.18326090e+08],
								       [ 9.27018941e+07],
								       [-6.87882565e+06],
								       [-1.35395305e+08]])
		self.linear_GD = np.array([[-0.00055807],
							        [-0.0002771 ],
							        [-0.00047637],
							        [ 0.00710928],
							        [ 0.01236565],
							        [ 0.00395546]])

		self.linear_GD_loss = np.array([1.6224629259205612,
										  1.6169984564771551,
										  1.6115674174496362,
										  1.6061696355422785,
										  1.6008049381327374])

		self.linear_SGD = np.array([[-0.00097704],
							        [-0.00051619],
							        [-0.00085263],
							        [ 0.01271591],
							        [ 0.02209805],
							        [ 0.00708663]])

		self.linear_SGD_loss = np.array([1.6057930449642408,
										  1.6064912589327578,
										  1.606782891780674,
										  1.6054777046998199,
										  1.6029870877021566,
										  1.6015306119972843,
										  1.6014799039020375,
										  1.5937880322050066,
										  1.5795492076116053])

		self.ridge_closed = np.array([[0.84067348],
								       [0.0668604 ],
								       [0.04011624],
								       [0.2966824 ],
								       [0.49447066],
								       [0.17800944]])

		self.ridge_GD = np.array([[-5.73042436e-08],
							        [-2.98218975e-08],
							        [-4.97357128e-08],
							        [ 7.17343222e-07],
							        [ 1.24864299e-06],
							        [ 3.98563359e-07]])

		self.ridge_GD_loss = np.array([1.6279604495683662,
									  1.6279598993847644,
									  1.6279593492015598,
									  1.627958799018752,
									  1.6279582488363422])

		self.ridge_SGD = np.array([[-0.00097276],
							        [-0.00047547],
							        [-0.00082582],
							        [ 0.01260174],
							        [ 0.02190381],
							        [ 0.00702051]])

		self.ridge_SGD_loss = np.array([1.6057930449642408,
									  1.6065403075023794,
									  1.6068793480318722,
									  1.6056208539715333,
									  1.6031796233365752,
									  1.6017780020315806,
									  1.6017852433110522,
									  1.5941493475674082,
									  1.5799776412568234])
		self.cross_val = np.array([1.4798554791457135, 
									2.283302637896854, 
									1.8018567623705222])






		
